// 1) : 数组方法的作用
// 2) : 参数
// 3) : 方法的返回值
// 4) : 原有的数组是否发生改变

// 1.pop
   1. 删除数组的最后一项
   2. 不需要传参
   3. 返回值是删除的那一项
   4. 原有数组发生改变

// 2. push
   1.向数组末尾新增一项或多项
   2.需要传参
   3.返回新数组的length
   4.原有数组发生改变;
// 3. shift
   1. 删除数组的第一项
   2. 不需要传参
   3. 返回删除的那一项
   4. 原有数组发生改变;
// 4. unshift
   1.向数组的开头新增一项或多项
   2.需要参数
   3.返回新数组的length
   4.原有数组发生改变

// 5. slice
   1.数组的截取
   2.参数
      slice(m,n): 从索引m开始，截取到索引n;但是不包含n;
      支持负数，让ary.length和负数运算，再截取；
      m>n返回值空数组；
      slice(m) : 从索引m开始，截取到最后一项；
      slice()  : 克隆一份一模一样的数组;
   3.返回截取到的新数组
   4.原有数组不发生改变；

// 6.splice
   1.删除数组的某几项
   2.参数
      splice(m,x,n): 替换；从索引m开始，删除x项，用n进行替换；
                     x=0 : 在索引m前面新增几项或一项
      splice(m,n) : 从索引m开始，删除n项；
      splice(m) : 从索引m开始，删除到数组的末尾
   3.被删除的几项组成一个新的数组
   4.原有数组发生改变；

// 7.sort

   1.排序
   2. 参数
       不传参： 只能排数组成员是相同位数的数组；
       ary.sort(function(){return a-b}): 从小到大排序
       ary.sort(function(){return b-a}): 从大到小排序
   3. 返回排序后的新数组
   4. 原有数组发生改变；

// 8.reverse
   1. 将数组成员颠倒过来
   2. 不用传参
   3. 返回颠倒后的新数组
   4. 原有数组发生改变；

// 9.indexOf
   1. 检测数组成员在数组中第一次出现的索引位置；
   2. 需要参数，是要检测的数组成员
   3. 返回当前数组的成员第一次出现对应的索引
   4. 原有数组不改变
   // 如果校验的数组成员不存在，那么返回-1；
// 10. lastIndexOf
   1.检测数组成员在数组中最后一次出现的索引位置；
   2.需要参数，是要检测的数组成员
   3.返回当前数组的成员最后一次出现对应的索引
   4.原有数组不改变
   // 如果校验的数组成员不存在，那么返回-1；
// 11. concat
   1. 数组的拼接
   2. 参数：
      数组： 把两个数组连接到一起
      分开传递： 把这几项新增到数组的末尾
      不传： 数组克隆一份
   3. 返回一个连接后的新数组
   4. 原有数组不发生改变
12. join
   1. 把数组的每一项按照特定的字符连接成一个字符串
   2. 需要参数
   3. 返回一个连接在一起的字符串
   4. 原有数组不发生改变；
13. map
   1. 映射，可以映射成一个新的数组；根据回调函数的返回值，组成了新的数组
   2. 需要参数
   3. 返回一个映射之后新的数组
   4. 原有数组不发生改变；

14. forEach
   1. 循环
   2. 需要参数
   3. forEach是没有return；返回值是undefined；
   4. 原有数组不变

15. toString
   1. 将数组转成字符串
   2. 不需要参数
   3. 返回一个转之后的字符串
   4. 原有数组不改变
